name: RDP - Both

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        run: |
          # Enable Remote Desktop and disable Network Level Authentication (if needed)
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force

          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"

          # Remove any existing rule with the same name to avoid duplication
          netsh advfirewall firewall delete rule name="RDP-Tailscale" || Write-Host "No existing rule to delete"
          
          # Allow incoming connections on port 3389
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389

          # Restart the Remote Desktop service
          Restart-Service -Name TermService -Force

      - name: Reset Password for runneradmin
        run: |
          $password = "Abc12345"
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force

          # Reset password for runneradmin
          if (Get-LocalUser -Name "runneradmin" -ErrorAction SilentlyContinue) {
              Set-LocalUser -Name "runneradmin" -Password $securePass
          } else {
              Write-Error "User 'runneradmin' not found."
              exit 1
          }

          echo "RDP_USER=runneradmin" >> $env:GITHUB_ENV
          echo "RDP_PASSWORD=$password" >> $env:GITHUB_ENV

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=$env:TAILSCALE_AUTH_KEY --hostname=gh-runner-$env:GITHUB_RUN_ID
          
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              Start-Sleep -Seconds 5
              $retries++
          }
          
          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned. Exiting."
              exit 1
          }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV

      - name: Verify RDP Accessibility
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "TCP connection to RDP port 3389 failed"
              exit 1
          }
          Write-Host "TCP connectivity successful!"

      - name: Download Ngrok
        shell: pwsh
        run: |
          Write-Host "Downloading Ngrok..."
          $url  = "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-stable-windows-amd64.zip"
          $zipPath = "$env:TEMP\ngrok.zip"
          $exePath = "$env:TEMP\ngrok.exe"
          Invoke-WebRequest -Uri $url -OutFile $zipPath
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          [System.IO.Compression.ZipFile]::ExtractToDirectory($zipPath, $env:TEMP)
          Write-Host "Ngrok downloaded to $exePath"
      
      - name: Start Ngrok TCP Tunnel for RDP
        shell: pwsh
        env:
          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
          RDP_USER: ${{ secrets.RDP_USER }}
          RDP_PASSWORD: ${{ secrets.RDP_PASSWORD }}
        run: |
          $ngrokPath = "$env:TEMP\ngrok.exe"
          Write-Host "Authenticating Ngrok..."
          & $ngrokPath authtoken $env:NGROK_AUTH_TOKEN
      
          Write-Host "Starting Ngrok TCP tunnel for RDP..."
          $ngrokProcess = Start-Process -FilePath $ngrokPath -ArgumentList "tcp 3389 --log=stdout" -RedirectStandardOutput "$env:TEMP\ngrok.log" -PassThru
      
          # Wait a few seconds for the tunnel to start
          Start-Sleep -Seconds 10
      
          # Read Ngrok log to find public TCP address
          $log = Get-Content "$env:TEMP\ngrok.log" -Raw
          if ($log -match "tcp://([\d\.]+:\d+)") {
              $publicAddress = $matches[1]
              Write-Host "‚úÖ Ngrok tunnel started!"
              Write-Host "Public RDP address: $publicAddress"
              Write-Host "Username: $env:RDP_USER"
              Write-Host "Password: $env:RDP_PASSWORD"
          } else {
              Write-Host "‚ùå Failed to detect Ngrok public address. Check logs at $env:TEMP\ngrok.log"
          }

      - name: Show login info
        run: |
          Write-Host "============================================================"
          Write-Host "‚úÖ RDP is ready!"
          Write-Host "üë§ Username: $env:RDP_USER"
          Write-Host "üîë Password: $env:RDP_PASSWORD"
          Write-Host "üåç Tailscale RDP IP: $env:TAILSCALE_IP"
          Write-Host "============================================================"

      - name: Keep Workflow Alive
        shell: pwsh
        run: |
          while ($true) {
              Write-Host "[$(Get-Date)] Playit Tunnel Active - Press Ctrl+C to stop"
              Start-Sleep -Seconds 300
          }
