name: RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        shell: powershell
        run: |
          # Enable Remote Desktop (keep NLA enabled for safety)
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
            -Name "fDenyTSConnections" -Value 0 -Force

          # Do NOT disable UserAuthentication (NLA) or set SecurityLayer to 0 â€” keep defaults for security

          # Remove any existing rule with same name (ignore errors)
          netsh advfirewall firewall delete rule name="RDP-Tailscale" 2>$null

          # Allow RDP only from Tailscale's typical CGNAT space (restrict exposure)
          netsh advfirewall firewall add rule name="RDP-Tailscale" `
            dir=in action=allow protocol=TCP localport=3389 remoteip=100.64.0.0/10 profile=any

          # Restart Remote Desktop service to ensure changes take effect
          Restart-Service -Name TermService -Force

      - name: Create RDP User with Fixed Password
        shell: powershell
        run: |
          # Define the fixed password (e.g., '123')
          $pw = "123"

          # Convert to SecureString
          $securePass = ConvertTo-SecureString $pw -AsPlainText -Force

          # Check if the user already exists; if so, reset the password
          if (Get-LocalUser -Name "RDP" -ErrorAction SilentlyContinue) {
              Set-LocalUser -Name "RDP" -Password $securePass
          } else {
              # Create the user with the fixed password
              New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires -PasswordNeverExpires
          }

          # Add the user to Remote Desktop Users group (no Administrators group)
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"

          # Mask the password in GitHub Actions logs for security
          Write-Output "::add-mask::$pw"

          # Write credentials to a temp file for artifact upload
          $credsFile = Join-Path $env:RUNNER_TEMP "rdp_creds.txt"
          "Username: RDP" | Out-File -FilePath $credsFile -Encoding utf8
          "Password: $pw"     | Out-File -FilePath $credsFile -Append -Encoding utf8
          Write-Output "CREDS_FILE=$credsFile" >> $env:GITHUB_ENV

          # Safety check if user creation was successful
          if (-not (Get-LocalUser -Name "RDP")) {
              Write-Error "User creation failed"
              exit 1
          }

      - name: Install Tailscale
        shell: powershell
        run: |
          # Use the general stable installer that resolves to latest stable for your platform
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup.msi"
          $installerPath = Join-Path $env:TEMP "tailscale.msi"

          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath -UseBasicParsing
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        shell: powershell
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          $exe = Join-Path $env:ProgramFiles "Tailscale\tailscale.exe"
          if (-not (Test-Path $exe)) {
              Write-Error "Tailscale not found at $exe"
              exit 1
          }

          & $exe up --authkey=$env:TAILSCALE_AUTH_KEY --hostname=gh-runner-$env:GITHUB_RUN_ID

          # Wait for an IPv4 Tailscale IP
          $tsIP = $null
          for ($i=0; $i -lt 20 -and -not $tsIP; $i++) {
              Start-Sleep -Seconds 3
              $ipsRaw = & $exe ip -4 2>$null
              $ips = $ipsRaw -split "`n" | ForEach-Object { $_.Trim() } | Where-Object { $_ -match '\d+\.\d+\.\d+\.\d+' }
              if ($ips) { $tsIP = $ips[0] }
          }

          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned. Exiting."
              exit 1
          }

          Write-Output "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
          Write-Host "Assigned Tailscale IP: $tsIP"

      - name: Verify RDP Accessibility
        shell: powershell
        run: |
          $ip = $env:TAILSCALE_IP
          Write-Host "Testing RDP connectivity to $ip:3389 ..."
          $test = Test-NetConnection -ComputerName $ip -Port 3389 -WarningAction SilentlyContinue
          if (-not $test.TcpTestSucceeded) {
              Write-Error "TCP connection to RDP port 3389 failed"
              exit 1
          }
          Write-Host "TCP connectivity successful!"

      - name: Upload credentials artifact (secure)
        uses: actions/upload-artifact@v4
        with:
          name: rdp-credentials
          path: ${{ env.CREDS_FILE }}
          retention-days: 1

      - name: Maintain Connection (finite)
        shell: powershell
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "Username: RDP"
          Write-Host "Credentials uploaded as artifact 'rdp-credentials' (retention: 1 day)."
          Write-Host "==================`n"

          # Keep runner active for 60 minutes (adjust as needed; avoid infinite loops)
          $minutesToKeep = 60
          for ($i=0; $i -lt $minutesToKeep; $i++) {
              Write-Host "[$(Get-Date -Format o)] RDP Active - sleeping ($($minutesToKeep - $i) minutes left)"
              Start-Sleep -Seconds 60
          }

          Write-Host "Maintenance period complete. Workflow will finish, Tailscale will remain installed but runner will return to pool."
